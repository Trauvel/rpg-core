import { EventBus } from "../core/eventBus";
import { StateManager } from "../core/stateManager";
import { Server } from "socket.io";
import { glob } from "glob";
import path from "path";

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∏—Ö
export async function registerAllHandlers(eventBus: EventBus, stateManager: StateManager, io: Server) {
    // –ò—â–µ–º –≤—Å–µ ts-—Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ index.ts
    const files = await glob(path.join(__dirname, "*.ts").replace(/\\/g, "/"), {
        ignore: ["**/index.ts"]
    });

    const handlers = [];

    for (const file of files) {
        const module = await import(file);

        // –ò—â–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–æ–¥—É–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å register
        for (const exportKey of Object.keys(module)) {
            const fn = module[exportKey];
            if (exportKey.startsWith("register") && typeof module[exportKey] === "function") {
                handlers.push({
                    "fn": fn,
                    "exportKey": exportKey,
                    "file": path.basename(file),
                    "priority": fn.priority || 0
                });
            }
        }
    }

    handlers
        .sort((a, b) => (a.priority || 0) - (b.priority || 0))
        .forEach((obj) => {
            if (!obj.fn) {
                console.error(`–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ${obj.exportKey} –∏–∑ ${obj.file}`);
                return;
            }
            console.log(`üîå –ü–æ–¥–∫–ª—é—á–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: ${obj.exportKey} –∏–∑ ${path.basename(obj.file)}`);
            obj.fn(eventBus, stateManager, io)
        });
}