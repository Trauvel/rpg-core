import { GameEvent } from '@rpg-platform/shared';
import { EventBus } from "../core/eventBus";
import { StateManager } from "../core/stateManager";
import { Server } from "socket.io";
import { PersistenceService } from "../services/persistence";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ë–î
 * –í–ê–ñ–ù–û: –í production —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å debouncing/throttling
 */
export function registerPersistenceHandlers(eventBus: EventBus, stateManager: StateManager, io: Server) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    eventBus.on(GameEvent.PLAYER_UPDATE, async (data) => {
        const publicState = stateManager.getPublicState();
        const player = publicState.players.find((p) => p.id === data.playerId || p.userId === data.playerId);

        if (player && player.userId) {
            console.log(`üíæ Saving player state for ${player.userId}...`);
            const success = await PersistenceService.savePlayerState(player.userId, player);

            if (success) {
                console.log(`‚úÖ Player state saved for ${player.userId}`);
            } else {
                console.error(`‚ùå Failed to save player state for ${player.userId}`);
            }
        }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    eventBus.on(GameEvent.PLAYER_CONNECT, async (data) => {
        if (data.userId) {
            console.log(`üì• Loading player state for ${data.userId}...`);
            const savedState = await PersistenceService.loadPlayerState(data.userId);

            if (savedState) {
                console.log(`‚úÖ Player state loaded for ${data.userId}`);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É –≤ game state
                const publicState = stateManager.getPublicState();
                const playerIndex = publicState.players.findIndex((p) => p.userId === data.userId);

                if (playerIndex !== -1) {
                    publicState.players[playerIndex] = {
                        ...publicState.players[playerIndex],
                        ...savedState,
                    };

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    io.emit(GameEvent.STATE_CHANGED, stateManager.getState());
                }
            } else {
                console.log(`‚ÑπÔ∏è  No saved state found for ${data.userId}, using defaults`);
            }
        }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    eventBus.on(GameEvent.PLAYER_LEAVE, async (data) => {
        if (data.userId) {
            console.log(`üíæ Saving final state for ${data.userId}...`);
            
            const publicState = stateManager.getPublicState();
            const player = publicState.players.find((p) => p.userId === data.userId);

            if (player) {
                const success = await PersistenceService.savePlayerState(data.userId, player);

                if (success) {
                    console.log(`‚úÖ Final state saved for ${data.userId}`);
                } else {
                    console.error(`‚ùå Failed to save final state for ${data.userId}`);
                }
            }
        }
    });
}

